#!/bin/sh
# script config Infondlinux
# distributed under New BSD Licence
# created by t0ka7a
# version 0.4
# this script provides a post-installation on Ubuntu
# careful: the script closes current firefox instances.

# debian packages
# - vim 
# - less 
# - gimp 
# - wipe 
# - xchat 
# - pidgin 
# - vlc 
# - nautilus-open-terminal
# - nmap
# - sun-java6-plugin et jre et jdk
# - bluefish
# - flash-plugin-nonfree
# - aircrack-ng
# - wireshark
# - ruby
# - ascii
# - webhttrack
# - socat
# - nasm
# - w3af
# - subversion
# - wireshark
# - mercurial
# - libopenssl-ruby
# - ruby-gnome2
# - traceroute
# - filezilla
# - gnupg
# - gpa
# - rubygems
# - php5
# - libapache2-mod-php5
# - mysql-server 
# - php5-mysql
# - phpmyadmin

# third party packages
# - tor
# - tor-geoipdb
# - virtualbox

# manually downloaded softwares and version
# - dirBuster (1.0-RC1)
# - truecrypt (7.0a)
# - metasploit framework (3.4.1)
# - webscarab (latest)
# - burp suite (1.3.03)
# - parosproxy (3.2.13)
# - jmeter (2.4)
# - rips (0.34)
# - google-chrome (latest)
# - origami-pdf (latest)
# - pdfid.py (0.0.11)
# - pdf-parser.pym (0.3.7)
# - mediawiki (1.16.0)
# - sqlmap (0.8)
# - fierce (latest)

# home made scripts
# - hextoasm
# - md5crack.py (written by Corbiero)
# - chartoascii.py

# firefox extensions
# - livehttpheaders 
# - firebug 
# - tamperdata 
# - noscript 
# - flashblock 
# - flashgot 
# - foxyproxy
# - certificatepatrol

######################################################
# trick to know: to share the current directory:
# $ sudo python -m SimpleHTTPServer 8080
######################################################



#####################################
# define username
#####################################

# define username (script started sudo!)
id=$(ls /home)

#####################################
# function log()
#####################################
# write in /usr/share/Infond/log/install.log
# @param1: type '+' or 'E' or 'I'
# @param2: 'message' 
log() (
  echo $1": $(date +%D' '%R':'%S) "$2 >> /usr/share/Infond/log/install.log
  echo $1": $(date +%D' '%R':'%S) "$2 > /dev/stdout
)

###########################
# function addBinEntry()
###########################
# adds a file .sh with the command line in the application directory
# adds a symbolic link in /usr/bin
# param1: name of the application
# param2: command line
# param3: term (default=NULL). To start the application in a new term 
# ex: addBinEntry dirbuster "java -jar /usr/share/Infond/bin/DirBuster-1.0-RC1/DirBuster-1.0-RC1.jar" term
#     creates a file dirbuster.sh in /usr/share/Infond/bin
addBinEntry() (
  # exit if file already in /usr/bin
  if [ -z $(ls /usr/share/Infond/bin | grep $1.sh ) ]; then
    echo "#!/bin/sh" > /usr/share/Infond/bin/$1.sh
    echo "\n\
# $1.sh\n\
# generated by Infond post installation Infond\n\
# launcher to start $1 in a terminal\n\
# a symbolic link was created in /usr/bin\n" >> /usr/share/Infond/bin/$1.sh

    # run application from terminal if $4 set to 'term'
    if ( [ ! -z $3 ] && [ $3 = 'term' ] ); then 
      echo "gnome-terminal --title=$1 --working-directory=\"/tmp\" --command=\"$2\"" >> /usr/share/Infond/bin/$1.sh
    else
      echo "$2" >> /usr/share/Infond/bin/$1.sh
    fi

    # log
    log "+" "$1.sh created in /usr/share/Infond/bin/."

    # make $1.sh executable
    chmod +x /usr/share/Infond/bin/$1.sh 
    log "+" "$1.sh chmod +x"

  else
    log "I" "$1 already in /usr/share/Infond/bin. Not added."
  fi

  # create symbolic link in /usr/bin
  if [ -z $(ls /usr/bin | grep $1.sh ) ]; then
    ln -s /usr/share/Infond/bin/$1.sh /usr/bin/$1
    log "+" "symbolic link to $1.sh created in /usr/bin/."
  else
    log "I" "$1 already in /usr/bin. Not added." && return 1
  fi
)

#####################################
# function aptremove()
#####################################
# remove package using apt
aptremove() ( 
  # if package not installed
  [ -z $(	dpkg --list $1 | grep ii) ] && log "I" "$1 not installed. can't be removed" && return 1
  # remove package
  apt-get --auto-remove -y --allow-unauthenticated remove $1
  # if package well removed
  [ -z $(dpkg --list $1 | grep ii) ] && log "+" "$1 removed"   
)

#####################################
# function aptinstall()
#####################################
# install package using apt
aptinstall() (
  # if package already installed 
  [ ! -z "$(dpkg --list $1 | grep ii)" ] && log "I" "$1 already installed. can't be installed" && return 1
  # install package
  apt-get --auto-remove -y --allow-unauthenticated install $1 
  # if package well installed
  [ ! -z "$(dpkg --list $1 | grep ii)" ] && log "+" "$1 installed"
)

#################################
# function firefoxadd()
#################################
# download firefox extension .xpi into ~/.mozilla/firefox/*.default/extensions/
# it is possible to install extension into /usr/lib/firefox-addons/extensions
# firefox will install it at next start
# @param1: name of the extension
# @param2: number of extension on addons.mozilla.org 
firefoxadd() (
  if [ -z "$(ls -R ~/.mozilla/firefox/*.default/extensions | grep $1)" ]; then 
    # download
    wget https://addons.mozilla.org/en-US/firefox/downloads/latest/$2/addon-$2-latest.xpi -nc -P ~/.mozilla/firefox/*.default/extensions/
    # give access to current user
    chown $id:$id ~/.mozilla -R
    log "+" "chown $id:$id ~/mozilla -R fait"
    # install addon
    firefox -silent -offline
    # log
    log "+" "$1 firefox extension installed."
  else
   log "I" "$1 firefox extension already installed. .xpi not downloaded."
  fi
)

###########################
# function downloadicon()
###########################
# download picture and create icon
# @param1: name for the icon
# @param2: downloading address
# ex: downloadicon msf http://metasploit.com/icon.jpg
downloadicon() (
  if [ -z "$(ls /usr/share/Infond/pictures | grep $1.png )" ]; then
    wget $2 -P /tmp
    convert -size 48x48 /tmp/$(echo $2|awk -F/ '{print $NF}') -resize 48x48 -extent 48x48 +profile '*' /usr/share/Infond/pictures/$1.png
    log "+" "$1 icon downloaded"
    rm /tmp/$(echo $2|awk -F/ '{print $NF}')
  else
    log "I" "$1 icon already exists. Not downloaded."
  fi
)

###########################
# function addmenu()
###########################
# add an entry to gnome menu
# @param1: name
# @param2: comment
# @param3: command line
# @param4: terminal (true or false)
# @param5: categorie
addmenu() (
  if [ -z "$(ls /usr/share/applications | grep $1.desktop)" ];then
    echo "
[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=$1
Comment=$2
Icon=/usr/share/Infond/pictures/$1.png
Exec=$3
Terminal=$4
Categories=$5
" > /usr/share/applications/$1.desktop
    log "+" "$1.desktop created"
  else
    log "I" "$1.desktop already exists. Not updated."
  fi
)


###########################
# function addcategory()
###########################
# add a category to .desktop file
# @param1: name
# @param2: category
addcategory() (
[ -z $(cat /usr/share/applications/$1.desktop | grep $2) ] && sed -i "/Categories/s|$|$2;|" /usr/share/applications/$1.desktop
)

###########################
# function adddirectory()
###########################
# add a directory entry in /usr/share/desktop-directories
# this directory entry will be used in /etc/xdg/menus/applications.menu
# it needs an icon. You can use downloadicon function
# @param: name for the directory entry

adddirectory() (
if [ -z "$(ls /usr/share/desktop-directories | grep $1.directory)" ]; then
  echo "[Desktop Entry]
Name=$1
Comment=$1 tools
Icon=/usr/share/Infond/pictures/$1.png
Type=Directory
Categories=$1
" > /usr/share/desktop-directories/$1.directory
  log "+" "$1.directory written"
else
  log "I" "$1.directory already exists. Not updated."
fi
)

#####################################
# installation start
#####################################
# test sudo
[ $(id -u) -ne "0" ] && echo "You must be sudo to use this script." && exit 1

# mode verbose
#set -v
1>/dev/null
2>/dev/null

# catch CTRL-C
trap "echo ''; echo CTR-C was pressed. Exit; log 'E' 'CTRL-C pressed.; exit 1" 2

# create install directory
if [ -z "$(ls /usr/share | grep Infond)" ]; then
  mkdir /usr/share/Infond
  mkdir /usr/share/Infond/bin
  mkdir /usr/share/Infond/pictures
  mkdir /usr/share/Infond/log
fi

# create log file if not already created
echo "****************" >> /usr/share/Infond/log/install.log
log "+" "install begin"
echo "****************" >> /usr/share/Infond/log/install.log

##############################
# 1st start
###############################

# if dist-upgrade not done yet
if [ -z "$(cat /usr/share/Infond/log/install.log | grep dist-upgrade )" ]; then

  # dist-upgrade
  apt-get --auto-remove -y --allow-unauthenticated dist-upgrade

  # update log
  log "+" "dist-upgrade"

  # reboot
  echo "System will reboot. Please restart script after reboot"
  read pause 

  # reboot
  log "I" "reboot"
  reboot
fi


#################################
# further installs
#################################

# close firefox (necessary to install firefox extensions)
[ ! -z $(pidof firefox-bin) ] && kill -9 $(pidof firefox-bin)

#################################
# apt
#################################

# add Commercial repository
if [ -z "$(cat /etc/apt/sources.list | grep Commercial)" ]; then
  echo "" >> /etc/apt/sources.list
  echo "## Commercial" >> /etc/apt/sources.list
  echo "deb http://archive.canonical.com/ubuntu lucid partner" >> /etc/apt/sources.list
  log "+" "repository Commercial added to apt sources list"
else
  log "I" "repository Commercial already in apt sources list. Not added"
fi

# add torproject repository
if [ -z "$(cat /etc/apt/sources.list | grep torproject)" ]; then
  echo "" >> /etc/apt/sources.list
  echo "## tor" >> /etc/apt/sources.list
  echo "deb http://deb.torproject.org/torproject.org lucid main" >> /etc/apt/sources.list
  gpg --keyserver keys.gnupg.net --recv 886DDD89
  gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -
  log "+" "repository torproject added to apt sources list"
else
  log "I" "repository torproject already in apt sources list. Not added"
fi

# update
apt-get update > /dev/null
log "+" "apt-get update"
apt-get upgrade
log "+" "apt-get upgrade"

# apt remove useless packages
aptremove gwibber
aptremove empathy
aptremove gbrainy
aptremove f-spot
aptremove evolution
aptremove quadrapassel
aptremove totem

# apt install
aptinstall vim
aptinstall less
aptinstall gimp
aptinstall tor
aptinstall tor-geoipdb
aptinstall vlc
aptinstall nautilus-open-terminal
aptinstall sun-java6-plugin 
aptinstall sun-java6-jdk
aptinstall flashplugin-nonfree
aptinstall bluefish
aptinstall xchat
aptinstall pidgin
aptinstall ruby
aptinstall nasm
aptinstall subversion
aptinstall traceroute
aptinstall filezilla
aptinstall gnupg
aptinstall gpa

# add category to .desktop
addcategory bluefish Accessories
addcategory xchat Accessories
addcategory pidgin Accessories

##################################
# menu GNOME
##################################

# see $ gnome-help , (search for keyword ".desktop")

# add pictures (if not already in directory)
downloadicon Infond http://3.bp.blogspot.com/_Jna6k5HsSu4/TDH4lKIz1cI/AAAAAAAAAHc/a-P6uy2wHjI/s1600/Infond48x48.jpg

downloadicon Pentest http://3.bp.blogspot.com/_Jna6k5HsSu4/TDMceNplaqI/AAAAAAAAAHs/iWG1MOPS0uw/s320/pentest.png

downloadicon Forensics http://2.bp.blogspot.com/_Jna6k5HsSu4/THY3np27VLI/AAAAAAAAAH8/S2UXa4CsjB8/s1600/forensics.jpg

downloadicon pdf http://3.bp.blogspot.com/_Jna6k5HsSu4/THY4kUhlzkI/AAAAAAAAAIE/ShLrs-iI2rs/s1600/pdf.png

# add directory entries in /usr/share/Infond/desktop-directories
adddirectory Infond
adddirectory Pentest
adddirectory Forensics
adddirectory pdf

# modify /etc/xdg/menus/applications.menu
# the directory /etc/xdg is in $XDG_CONFIG_DIRS (see $ gnome-help)
if [ -z "$( cat /etc/xdg/menus/applications.menu | grep Infond.directory )" ]; then
  sed -i '/<!-- Accessories submenu -->/i\
  \
  <!-- Infond submenu -->\
  <Menu>\
    <Name>Infond</Name>\
    <Directory>Infond.directory</Directory>\
    <Menu>\
      <Name>Pentest</Name>\
      <Directory>Pentest.directory</Directory>\
      <Include>\
        <And>\
          <Category>Pentest</Category>\
        </And>\
      </Include>\
    </Menu>\
    <Menu>\
      <Name>Forensics</Name>\
      <Directory>Forensics.directory</Directory>\
       <Menu>\
          <Name>pdf</Name>\
          <Directory>pdf.directory</Directory>\
          <Include>\
            <And>\
              <Category>pdf</Category>\
            </And>\
          </Include>\
       </Menu>\
       <Include>\
        <And>\
          <Category>Forensics</Category>\
        </And>\
      </Include>\
    </Menu>\
    <Menu>\
      <Name>Accessories</Name>\
      <Directory>Utility.directory</Directory>\
      <Include>\
        <And><Category>Accessories</Category></And>\
      </Include>\
    </Menu>\
  </Menu>\
  ' /etc/xdg/menus/applications.menu
  log "+" "applications.menu modified"
else
  log "I" "applications.menu already correct. Not modified."
fi

##################################
# google-chrome
##################################

# download and install
if [ -z "$(ls /usr/share/Infond/bin | grep google-chrome)" ]; then
  wget http://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb -nc -P /usr/share/Infond/bin*
  gdebi -n /usr/share/Infond/bin/google-chrome*
  log "+" "google-chrome installed"
else
  log "I" "google-chrome already in /usr/share/Infond/bin. Not downloaded."
fi


##################################
# sqlmap 0.8
##################################

if [ -z "$(ls /usr/share/Infond/bin | grep sqlmap)" ]; then
  wget http://downloads.sourceforge.net/project/sqlmap/sqlmap/0.8/sqlmap_0.8-1_all.deb -nc -P /usr/share/Infond/bin*
  gdebi -n /usr/share/Infond/bin/sqlmap*
  log "+" "sqlmap installed"
else
  log "I" "sqlmap already in /usr/share/Infond/bin. Not downloaded."
fi

downloadicon sqlmap http://sqlmap.sourceforge.net/sqlmap.png

addmenu sqlmap "sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of back-end database servers." "bash -c 'cd /tmp;sqlmap -h;bash'" "true" "Pentest"


##################################
# nmap
##################################

# apt install
aptinstall nmap

# download icon
downloadicon nmap http://www.ansi.tn/gfx/nmap.png

# add entry in Gnome menu
addmenu nmap "Nmap (\"Network Mapper\") is a free and open source utility for network exploration or security auditing." "bash -c 'cd /tmp;nmap -h;nmap -V;bash'" "true" "Pentest"

##################################
# w3af
##################################

# apt install
aptinstall w3af

# add entry in Gnome menu
addcategory w3af Pentest

##################################
# wireshark
##################################

# apt install
aptinstall wireshark

# add entry in Gnome menu
addcategory wireshark Pentest


##################################
# md5crack.py - written by Corbiero
##################################

echo '
import urllib, re , sys

# tool written by Corbiero
# 2010

# md5crack.com
params = urllib.urlencode({"term": sys.argv[1]})
print "Try to crack "+ sys.argv[1] +" on md5crack.com"
f = urllib.urlopen("http://md5crack.com/crackmd5.php", params)
y = f.read()
if re.match("(.*)Found: (.*)</div>\\n(.*)",y,re.DOTALL):
	print re.match("(.*)Found: (.*)</div>\\n(.*)",y,re.DOTALL).group(2)
	
# passcracking.com
params = urllib.urlencode({"datafromuser": sys.argv[1]})
print "Try to crack "+ sys.argv[1] +" on passcracking.com"
f = urllib.urlopen("http://passcracking.ru/index.php", params)
y = f.read()
if re.match("(.*)<td>md5 Database</td><td>(.*)</td><td bgcolor=#FF0000>(.*)</td><td>",y,re.DOTALL):
	print "Password: " + re.match("(.*)<td>md5 Database</td><td>(.*)</td><td bgcolor=#FF0000>(.*)</td><td>",y,re.DOTALL).group(3)
	
# md5.my-addr.com
params = urllib.urlencode({"md5": sys.argv[1]})
print "Try to crack "+ sys.argv[1] +" on md5.my-addr.com"
f = urllib.urlopen("http://md5.my-addr.com/md5_decrypt-md5_cracker_online/md5_decoder_tool.php", params)
y = f.read()
if re.match("(.*)Hashed string</span>: (.*)</div>\\n<br>(.*)",y,re.DOTALL):
	print "Password: " + re.match("(.*)Hashed string</span>: (.*)</div>\\n<br>(.*)",y,re.DOTALL).group(2)
' > /usr/share/Infond/bin/md5crack.py

addBinEntry md5crack "python /usr/share/Infond/bin/md5crack.py \$1"

downloadicon md5crack http://www.hamza.ma/wp-content/uploads/2008/07/cracker.jpg

addmenu md5crack "md5crack is a tool written in Python by Corbiero. It sends a request to different websites which provide plain text given a md5 hash." "bash -c 'cd /tmp;echo example: $ md5crack 286755fad04869ca523320acce0dc6a4;bash;'" "true" "Accessories" 

##################################
# chartoascii.py - written by Corbiero
##################################

echo "
import sys
# script to encode a string in ascii
output = '0x'
for c in sys.argv[1]:
	output += str(hex(ord(c))[2:])
print output
" > /usr/share/Infond/bin/chartoascii.py

addBinEntry chartoascii "python /usr/share/Infond/bin/chartoascii.py \$1"

downloadicon chartoascii http://www.prntrkmt.org/hieroglyphs/monoliterals/pict/bwvulture.gif

addmenu chartoascii "script to encode a string in ascii." "bash -c 'cd /tmp;echo example: $ chartoascii mystring;bash;'" "true" "Accessories" 


##################################
# hextoasm
##################################
# script to print asm instructions from a hex string
echo 'usage() (
  echo "********************************************************"
  echo "* script adapted from a tip by ivanlef0u               *"
  echo "* written by t0ka7a for Infondlinux                    *"
  echo "* http://Infond.blogspot.com                           *"
  echo "*                                                      *"
  echo "* prints asm instructions from an hex strings          *"
  echo "*                                                      *"
  echo "* ex:                                                  *"
  echo "* $ hextoasm "\x90\x31\x90\x90\xea\x42\x42\x42"        *"
  echo "* 00000000  90                nop                      *"
  echo "* 00000001  319090EA4242      xor \eax+0x4242ea90],edx *"
  echo "* 00000007  42                inc edx                  *"
  echo "********************************************************"
  echo
)

# help
[ $1 = "-h" ] && usage && exit 0

# test nb of arguments
[ $# != 1 ] && echo one argument needed && exit -1

# test nasm installed
[ -z "$(dpkg --list nasm | grep ii)" ] && echo "please install nasm:  apt-get install nasm" && exit -1

python -c "print \"$1\"" | tr -d "\r\n" | ndisasm -u -
' > /usr/share/Infond/bin/hextoasm
chmod +x /usr/share/Infond/bin/hextoasm
ln -s /usr/share/Infond/bin/hextoasm /usr/bin/hextoasm

# download icon
downloadicon hextoasm http://info.sio2.be/python/1/images/assembler.png
 
# add entry in Gnome menu for DirBuster
addmenu hextoasm "prints asm instructions from an hex strings ." "bash -c 'cd /tmp;hextoasm -h;bash'" "true" "Accessories"

##################################
# origami-pdf
##################################
aptinstall mercurial
aptinstall libopenssl-ruby
aptinstall ruby-gnome2
if [ -z "$(ls /usr/share/Infond/bin | grep origami-pdf)" ]; then
  hg clone https://origami-pdf.googlecode.com/hg/ /usr/share/Infond/bin/origami-pdf
  cp -r /usr/share/Infond/bin/origami-pdf/origami* /usr/lib/ruby/1.8
  chown -R root: /usr/lib/ruby/1.8/origami
  log "+" "origami-pdf installed"
else
  log "I" "origami-pdf already in /usr/share/Infond/bin. Not downloaded."
fi

downloadicon origami http://1.bp.blogspot.com/_Jna6k5HsSu4/THY_Oo1e1dI/AAAAAAAAAIM/8RVTDhG3d98/s200/origami.jpg

addmenu origami "ruby framework for pdf generation" "bash -c 'cd /tmp;cat /usr/share/Infond/bin/origami-pdf/README;echo samples available in /usr/share/Infond/bin/origami-pdf/samples;bash'" "true" pdf


##################################
# dirBuster-1.0-RC1 2009-02-27
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep DirBuster)" ]; then
  wget "http://sourceforge.net/projects/dirbuster/files/DirBuster%20%28jar%20%2B%20lists%29/1.0-RC1/DirBuster-1.0-RC1.tar.bz2/download" -nc -P /tmp
  tar xjvf /tmp/DirBuster* -C /usr/share/Infond/bin
  rm /tmp/DirBuster-1.0-RC1.tar.bz2
  log "+" "dirbuster downloaded"
else
  log "I" "dirbuster already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon dirbuster http://a.fsdn.com/con/icons/di/dirbuster@sf.net/ologo.gif 

# create dirbuster.sh and add dirbuster.sh shortcut in /usr/bin
addBinEntry dirbuster "java -jar /usr/share/Infond/bin/DirBuster-1.0-RC1/DirBuster-1.0-RC1.jar"

# add entry in Gnome menu for DirBuster
addmenu dirbuster "DirBuster is a multi threaded java application designed to brute force directories and files names on web/application servers. Often is the case now of what looks like a web server #in a state of default installation is actually not, and has pages and applications hidden within. DirBuster attempts to find these." dirbuster "false" "Pentest"

##################################
# burp suite 1.3.03
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep burp)" ]; then
  rm -r /tmp/burp*
  wget "http://portswigger.net/suite/burpsuite_v1.3.03.zip" -nc -P /tmp
  unzip /tmp/burp* -d /tmp
  rm /tmp/burp*.zip
  mv /tmp/burp* /usr/share/Infond/bin/burp/
  rm -r /tmp/burp*
  log "+" "burp downloaded"
else
  log "I" "burp already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon burp http://www.crazynfunny.com/wp-content/uploads/2010/05/how-to-burp-on-command.gif 

# create burp.sh and add burp.sh shortcut in /usr/bin
addBinEntry burp "java -jar /usr/share/Infond/bin/burp/burp*.jar"

# add entry in Gnome menu
addmenu burp "Burp Suite is free to use for personal and commercial purposes." burp "false" "Pentest"

##################################
# fierce
##################################

if [ -z "$(ls /usr/share/Infond/bin | grep fierce2)" ]; then
  perl -MCPAN -e 'install Net::DNS'
  perl -MCPAN -e 'install Net::hostent'
  svn co https://svn.assembla.com/svn/fierce/fierce2/trunk/ /usr/share/Infond/bin/fierce2/
  chmod +x /usr/share/Infond/bin/fierce/install.sh
  /usr/share/Infond/bin/fierce2/install.sh
  log "+" "fierce2 installed"
else
  log "I" "fierce2 already in /usr/share/Infond/bin. Not downloaded."
fi
downloadicon fierce2 http://ha.ckers.org/fierce/fiercesmall.jpg

addBinEntry fierce2 "bash -c 'cd /tmp;fierce;echo ex: $ fierce -dns monsite.com;bash'"

addmenu fierce2 "Fierce is a reconnaissance tool written in Perl that quickly scans domains (usually in just a few minutes, assuming no network lag) using a variety of techniques to locate undocumented, internal or just hard-to-find resources via the DNS system." fierce2 "true" "Pentest"


##################################
# webscarab
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep webscarab)" ]; then
  rm -r /tmp/webscarab*
  wget "http://dawes.za.net/rogan/webscarab/webscarab-current.zip" -nc -P /tmp
  unzip /tmp/webscarab-current.zip -d /tmp
  rm /tmp/webscarab-current.zip
  mv /tmp/webscarab* /usr/share/Infond/bin/webscarab/
  rm -r /tmp/webscarab*
  log "+" "webscarab downloaded"
else
  log "I" "webscarab already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon webscarab http://www.owasp.org/skins/monobook/ologo.gif 

# create webscarab.sh and add webscarab.sh shortcut in /usr/bin
addBinEntry webscarab "java -jar /usr/share/Infond/bin/webscarab/webscarab.jar"

# add entry in Gnome menu
addmenu webscarab "WebScarab is a framework for analysing applications that communicate using the HTTP and HTTPS protocols." webscarab "false" "Pentest"

##################################
# pdfid.py
##################################

#install
if [ -z "$(ls /usr/share/Infond/bin | grep pdfid)" ]; then
  rm -r /tmp/pdfid*
  wget "https://www.didierstevens.com/files/software/pdfid_v0_0_11.zip" -nc -P /tmp
  unzip /tmp/pdfid_v0_0_11.zip -d /tmp
  rm /tmp/pdfid_v0_0_11.zip
  mv /tmp/pdfid.py /usr/share/Infond/bin/
  ln -s /usr/share/Infond/bin/pdfid.py /usr/bin/pdfid
  log "+" "pdfid downloaded"
else
  log "I" "pdfid already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon pdfid http://3.bp.blogspot.com/_Jna6k5HsSu4/THY4kUhlzkI/AAAAAAAAAIE/ShLrs-iI2rs/s1600/pdf.png

# add to menu
addmenu pdfid "tool for pdf analysis" "bash -c 'cd /tmp;echo example: $ pdfid mypdf.pdf;bash'" "true" pdf 

##################################
# pdf-parser.py
##################################

#install
if [ -z "$(ls /usr/share/Infond/bin | grep pdf-parser)" ]; then
  rm -r /tmp/pdf-parser*
  wget "https://www.didierstevens.com/files/software/pdf-parser_V0_3_7.zip" -nc -P /tmp
  unzip /tmp/pdf-parser_V0_3_7.zip -d /tmp
  rm /tmp/pdf-parser_V0_3_7.zip
  mv /tmp/pdf-parser.py /usr/share/Infond/bin/
  echo "please open a terminal and edit /usr/share/Infond/bin/pdf-parser.py ."
  echo "Then, correct the __maximum_python_version__  to current"
  echo "please press ENTER when done"
  read pause
  ln -s /usr/share/Infond/bin/pdf-parser.py /usr/bin/pdf-parser
  log "+" "pdf-parser downloaded"
else
  log "I" "pdf-parser already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon pdf-parser http://3.bp.blogspot.com/_Jna6k5HsSu4/THY4kUhlzkI/AAAAAAAAAIE/ShLrs-iI2rs/s1600/pdf.png

# add to menu
addmenu pdf-parser "tool for pdf analysis" "bash -c 'cd /tmp;pdf-parser;bash;'" "true" pdf 


##################################
# jmeter 2.4
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep jmeter)" ]; then
  rm -r /tmp/jmeter*
  wget "http://apache.crihan.fr/dist/jakarta/jmeter/binaries/jakarta-jmeter-2.4.tgz" -nc -P /tmp
  tar xzf /tmp/jakarta-jmeter-2.4.tgz -C /tmp
  rm /tmp/*jmeter*.tgz
  mkdir /usr/share/Infond/bin/jmeter
  mv /tmp/*jmeter* /usr/share/Infond/bin/jmeter/
  log "+" "jmeter downloaded"
else
  log "I" "jmeter already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon jmeter http://jakarta.apache.org/jmeter/images/logo.jpg 

# create webscarab.sh and add webscarab.sh shortcut in /usr/bin
addBinEntry jmeter "java -jar /usr/share/Infond/bin/jmeter/jakarta-jmeter-2.4/bin/ApacheJMeter.jar"

# add entry in Gnome menu
addmenu jmeter "Apache JMeter may be used to test performance both on static and dynamic resources (files, Servlets, Perl scripts, Java Objects, Data Bases and Queries, FTP Servers and more). It can be used to simulate a heavy load on a server, network or object to test its strength or to analyze overall performance under different load types. You can use it to make a graphical analysis of performance or to test your server/script/object behavior under heavy concurrent load." jmeter "false" "Pentest"

##################################
# apache2, php, mysql, phpmyadmin
##################################

# install apache and configure for local use only
aptinstall apache2
echo Listen 127.0.0.1:80 > /etc/apache2/ports.conf
echo Listen 127.0.0.1:443 >> /etc/apache2/ports.conf

# php, mysql and phpmyadmin
aptinstall php5
aptinstall libapache2-mod-php5
aptinstall mysql-server 
aptinstall php5-mysql
aptinstall phpmyadmin

# ssl
a2enmod ssl 
make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/ssl/private/localhost.pem
cp /etc/apache2/sites-available/default /etc/apache2/sites-available/ssl
sed -i '1,2s/\*:80/*:443/' /etc/apache2/sites-available/ssl
sed -i "3a\\\tSSLEngine On\n\tSSLCertificateFile /etc/ssl/private/localhost.pem" /etc/apache2/sites-available/ssl
a2ensite ssl

# restart apache
/etc/init.d/apache2 restart


##################################
# rips-scanner 0.34
##################################

# needs apache and php

# install
if [ -z "$(ls /var/www | grep rips)" ]; then
  rm -r /tmp/rips*
  wget "http://sourceforge.net/projects/rips-scanner/files/rips-0.34.zip/download" -nc -P /tmp
  mkdir /var/www/rips
  unzip /tmp/rips-0.34.zip -d /var/www/rips
  chown -R www-data: /var/www/rips 
  chmod 440 -R /var/www/rips
  chmod -R ug+X /var/www/rips
  /etc/init.d/apache2 restart
  rm /tmp/rips*
  log "+" "rips downloaded"
else
  log "I" "rips already in /var/www. Not downloaded."
fi

# download icon
downloadicon rips http://a.fsdn.com/con/icons/ri/rips-scanner@sf.net/rips.png 

# create rips.sh and add rips.sh shortcut in /usr/bin
addBinEntry rips "google-chrome http://127.0.0.1/rips"

# add entry in Gnome menu
addmenu rips "RIPS is a static source code analyser for vulnerabilities in PHP webapplications." rips "false" "Pentest"

##################################
# mediawiki
##################################

# install and secure mediawiki
# needs apache, php, mysql

if [ -z "$(ls /var/www | grep wiki)" ]; then
  rm -r /tmp/wiki*
  wget "http://download.wikimedia.org/mediawiki/1.16/mediawiki-1.16.0.tar.gz" -nc -P /tmp
  tar xzf /tmp/mediawiki-1.16.0.tar.gz -C /tmp
  rm /tmp/mediawiki-1.16.0.tar.gz
  mv /tmp/mediawiki-1.16.0 /var/www/wiki
  chown -R www-data: /var/www/wiki 
  chmod 440 -R /var/www/wiki
  chmod -R ug+X /var/www/wiki
  chmod 777 -R /var/www/wiki/config
  echo "Please configure your wiki."
  echo "The name for your wiki must be 'wiki'"
  echo "Remember the credentials you will submit: you will need them to log on you wiki."
  echo "When install is successful, close firefox tab or window to hold on with this script."
  echo "Please, press enter."
  read pause
  echo "Firefox is starting... Don't forget, you must use 'wiki' as name for your wiki."
  firefox http://localhost/wiki/index.php
  mv /var/www/wiki/config/LocalSettings.php /var/www/wiki/
  
  # secure the wiki
  # source: http://camillereverchon.net/mediawiki/index.php?title=S%C3%A9curiser_son_wiki

  # only registered users can edit
  echo ""  >> /var/www/wiki/LocalSettings.php
  echo "# only registered users can edit" >> /var/www/wiki/LocalSettings.php
  echo "\$wgGroupPermissions['*']['edit'] = false;"  >> /var/www/wiki/LocalSettings.php

  # only registered users can read (except main page)
  echo ""  >> /var/www/wiki/LocalSettings.php
  echo "\$wgWhitelistRead = array( \"Accueil\", \"Special:Userlogin\" );"   >> /var/www/wiki/LocalSettings.php
  echo "\$wgGroupPermissions['*']['read'] = false;"   >> /var/www/wiki/LocalSettings.php

  # free inscription forbidden
  # file
  FILE="/var/www/wiki/includes/DefaultSettings.php"
  # find the number of line with pattern wgGroupPermissions['*']['createaccount']
  # sed does not like ' and [ and ] and *. replace them:
  # ' -> \x27
  # [ -> \[
  # ] -> \]
  # * -> \*
  LINE=$(sed -n '/wgGroupPermissions\[\x27\*\x27\]\[\x27createaccount\x27\]/=' $FILE)
  # replace line
  # sed does not like either $VARIABLE.
  # use $VARIABLE -> $(echo $VARIABLE)
  AFTER="\$wgGroupPermissions['*']['createaccount']    = false;"
  sed -e "$(echo $LINE)s/.*/$(echo $AFTER)/"  -i $FILE 

  # change message loginprompt in french version (the default message socks)
  # default message : "Vous devez activer les témoins (''cookies'') pour vous connecter à {{SITENAME}}.
  # replace it with : "veuillez saisir votre identifiant et votre mot de passe"
  FILE="/var/www/wiki/languages/messages/MessagesFr.php"
  LINE=$(sed -n '/loginprompt/=' $FILE)
  AFTER="\x27loginprompt\x27 \=\> \"veuillez saisir votre identifiant et votre mot de passe\","
  sed -e "$(echo $LINE)s/.*/$(echo $AFTER)/"  -i $FILE 

  # hide tool box to people not logged in
  # add <?php if(\$this->data['loggedin']) { ?>
  FILE="/var/www/wiki/skins/MonoBook.php"
  BEGIN=$(sed -n '/div class="portlet" id="p-tb"/=' $FILE)
  AFTER="<?php if(\$this->data['loggedin']) { ?>"
  sed -e "$(echo $BEGIN)a$(echo $AFTER)"  -i $FILE 
  # add <?php } ?>
  FILE="/var/www/wiki/skins/MonoBook.php"
  DIV="<\/div>"
  FROM="function toolbox"
  TO=$DIV
  INSERT_THIS=" <?php } ?>"
  sed "/$FROM/,/$TO/ s/$DIV/$DIV$INSERT_THIS/" -i $FILE

  # hide tool box to users. Only admin can see it
  FILE="/var/www/wiki/includes/SpecialPage.php"
  # add ## at the beginning of string
  sed '/Userlogin\x27 / s/^/##/' -i $FILE

  # user can't create account. Only admin can do it.
  FILE="/var/www/wiki/includes/DefaultSettings.php"
  BEFORE_THIS="\$wgGroupPermissions\[\x27user\x27\]\[\x27move\x27\]"
  INSERT_THIS="\$wgGroupPermissions\[\x27user\x27\]\[\x27createaccount\x27\] \= false\;"
  sed -e "/$BEFORE_THIS/i$INSERT_THIS"  -i $FILE 

  log "+" "mediawiki installed and configured"

  # download icon
  downloadicon wiki http://www.watblog.com/wp-content/uploads/2008/03/wikipedia-ball.jpg

  # create wiki.sh and add wiki.sh shortcut in /usr/bin
  addBinEntry wiki "google-chrome http://127.0.0.1/wiki"

  # add entry in Gnome menu
  addmenu wiki "Your own wiki." wiki "false" "Accessories"

else
  log "I" "mediawiki already in /var/www. Not downloaded."
fi



##################################
# rubygems
##################################

aptinstall rubygems
export PATH=/var/lib/gems/1.8/bin:$PATH


##################################
# truecrypt-7.0a-linux-x86
##################################

#install
if [ -z "$(ls /usr/share/Infond/bin | grep truecrypt)"  ];then
  wget http://www.truecrypt.org/download/truecrypt-7.0a-linux-x86.tar.gz -nc -P /tmp
  log "+" "truecrypt-7.0 downloaded"
  tar xzf /tmp/truecrypt-7.0a-linux-x86.tar.gz -C /usr/share/Infond/bin/
  rm /tmp/truecrypt-7.0a-linux-x86.tar.gz
  /usr/share/Infond/bin/truecrypt-7.0a-setup-x86
  log "+" "truecrypt-7.0a installed"
else
  log "I" "truecrypt-7.0a already downloaded. Not updated."
fi

# add category to gnome menu
addcategory truecrypt Accessories


##################################
# virtualbox 3.2
##################################

# add non-free repository to apt
if [ -z "$(cat /etc/apt/sources.list | grep virtualbox)" ]; then
  echo "" >> /etc/apt/sources.list
  echo "## virtualbox" >> /etc/apt/sources.list
  echo "deb http://download.virtualbox.org/virtualbox/debian lucid non-free" >> /etc/apt/sources.list
  wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | apt-key add -
  apt-get update
  log "+" "virtualbox added to apt sources list"
else
  log "I" "virtualbox already in apt sources list. Not added"
fi

# apt install
aptinstall virtualbox-3.2

# add virtualbox to gnome Infond menu
addcategory virtualbox Accessories


##################################
# - paros 3.2.13
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep paros)" ]; then
  rm -r /tmp/paros*
  wget "http://downloads.sourceforge.net/project/paros/Paros/Version%203.2.13/paros-3.2.13-unix.zip" -nc -P /tmp
  unzip /tmp/paros*.zip -d /tmp
  rm /tmp/paros*.zip
  mv /tmp/paros* /usr/share/Infond/bin/paros/
  log "+" "paros downloaded"
else
  log "I" "paros already in /usr/share/Infond/bin. Not downloaded."
fi

# download icon
downloadicon paros http://securitytnt.com/wp-content/uploads/2007/03/paros.png 

# create paros.sh and paros.sh shortcut in /usr/bin
addBinEntry paros "cd /usr/share/Infond/bin/paros;java -jar paros.jar"

# add entry in Gnome menu
addmenu paros "A Java based HTTP/HTTPS proxy for assessing web application vulnerability. It supports editing/viewing HTTP messages on-the-fly. Other featuers include spiders, client certificate, proxy-chaining, intelligent scanning for XSS and SQL injections etc. " paros "false" "Pentest"


##################################
# - metasploit framework 3.4.1-linux-i386
##################################

# install
if [ -z "$(ls /usr/share/Infond/bin | grep framework-3.4.1)"  ];then
  wget http://www.metasploit.com/releases/framework-3.4.1-linux-i686.run -nc -P /usr/share/Infond/bin/
  log "+" "metasploit framework 3.4.1 downloaded"
  bash /usr/share/Infond/bin/framework-3.4.1-linux-i686.run 
  log "+" "metasploit framework 3.4.1 installed"
else
  log "I" "metasploit framework 3.4.1 already downloaded. Not updated."
fi

# download icon
downloadicon msfconsole http://www.metasploit.com/images/hax_small.jpg

# add msfconsole entry in Gnome menu
addmenu msfconsole "The Metasploit Framework is both a penetration testing system and a development platform for creating security tools and exploits." "bash -c 'echo msfconsole;msfconsole -v;msfconsole'" "true" "Pentest" 

###########################
# wipe
###########################

# apt install
aptinstall wipe

# download icon
downloadicon wipe http://i26.tinypic.com/141o2nt.jpg

# add entry in Gnome menu
addmenu wipe "securely erase files from magnetic media." "bash -c 'cd /tmp;wipe -h;bash'" "true" "Accessories"

###########################
# socat
###########################

# apt install
aptinstall socat

# download icon
downloadicon socat http://2.bp.blogspot.com/_Jna6k5HsSu4/TFaaYRZYx1I/AAAAAAAAAH0/mwnHBGIMP0U/s1600/socat.png

# add entry in Gnome menu
addmenu socat "Multipurpose relay (SOcket CAT)." "bash -c 'cd /tmp;socat -h;echo ex: socat tcp4-listen:2121,reuseaddr,fork tcp-connect:www.google.com:80;bash'" "true" "Accessories"

###########################
# ascii
###########################

# apt install
aptinstall ascii

# download icon
downloadicon ascii http://ascii-table.com/img/table.gif

# add entry in Gnome menu
addmenu ascii "table ascii." "bash -c 'ascii -h;bash'" "true" "Accessories"


###########################
# aircrack-ng
###########################

# apt install
aptinstall aircrack-ng

# download icon
downloadicon aircrack http://www.hebertphp.net/wordpress/wp-content/uploads/2009/07/wifi.jpg 

# add entry in Gnome menu
addmenu aircrack "Aircrack-ng is an 802.11 WEP and WPA-PSK keys cracking program that can recover keys once enough data packets have been captured. It implements the standard FMS attack along with some optimizations like KoreK attacks, as well as the all-new PTW attack, thus making the attack much faster compared to other WEP cracking tools. In fact, Aircrack-ng is a set of tools for auditing wireless networks." "bash -c 'cd /tmp;aircrack-ng --help;bash'" "true" "Pentest"

###########################
# webhttrack
###########################

# apt install
aptinstall webhttrack

# download icon
downloadicon webhttrack http://i757.photobucket.com/albums/xx217/vieand/Screenshot/Logo/Winhttrack.jpg

# add entry in Gnome menu
addmenu webhttrack "webhttrack - offline browser : copy websites to a local directory." "bash -c 'cd /tmp;webhttrack -h;bash'" "true" "Accessories"


###########################
# firefox extensions
###########################

# download and install firefox extensions
firefoxadd firebug 1843
firefoxadd livehttpheaders 3829
firefoxadd noscript 722
firefoxadd flashblock 433
firefoxadd flashgot 220
firefoxadd foxyproxy 2464
firefoxadd certificatepatrol 6415
# installation of useragentswitcher does not work. why????
# must be manually installed
#firefoxadd useragentswitcher 59

# tamper_data-11.0.1-fx
# does not use "latest" address in mozilla repo. 
# We must download specific version.
if [ -z "$(ls -R ~/.mozilla/firefox/*.default/extensions | grep tamperdata)" ]; then 
  # download
  wget https://addons.mozilla.org/fr/firefox/downloads/file/79565/tamper_data-11.0.1-fx.xpi -nc -P ~/.mozilla/firefox/*.default/extensions
  # give access to current user
  chown $id:$id ~/.mozilla -R
  log "+" "chown $id:$id ~/mozilla -R fait"
  # install addon
  firefox -silent -offline
  # log
  log "+" "tamper_data firefox extension installed."
else
 log "I" "tamper_data already installed. .xpi not downloaded."
fi

###########################
# conclusion
###########################

# chmod every other files in Infond
id=$(ls /home)
chown $id:$id /usr/share/Infond -R
chmod -R 744 /usr/share/Infond

# EOF
